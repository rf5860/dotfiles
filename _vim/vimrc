" Ideas in this vimrc from many places, including:
"   http://vim.wikia.com/wiki/Example_vimrc 
"   http://amix.dk/vim/vimrc.html
"   http://www.codeography.com/2013/06/17/replacing-all-the-things-with-unite-vim.html
"   http://bling.github.io/blog/2013/06/02/unite-dot-vim-the-plugin-you-didnt-know-you-need/

set nocompatible
set modeline
set viminfo+=n~/.cache/viminfo

"------------------------------------------------------------
" Plugins and most of their config {{{1

" Plugin loader to load all other plugins
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'gmarik/Vundle.vim'

" Status line
Plugin 'bling/vim-airline'
    let g:airline_theme='glenn'
    let g:airline_powerline_fonts=1
    let g:airline#extensions#whitespace#enabled=0
    let g:airline#extensions#tabline#enabled = 1
    let g:airline#extensions#tabline#fnamemod = ':t'
    set noshowmode
    set laststatus=2
    set cmdheight=2

" Improved incremental search
Plugin 'haya14busa/incsearch.vim'
    map /  <Plug>(incsearch-forward)
    map ?  <Plug>(incsearch-backward)
    map g/ <Plug>(incsearch-stay)
    set hlsearch
    let g:incsearch#auto_nohlsearch = 1
    map n  <Plug>(incsearch-nohl-n)
    map N  <Plug>(incsearch-nohl-N)
    map *  <Plug>(incsearch-nohl-*)
    map #  <Plug>(incsearch-nohl-#)
    map g* <Plug>(incsearch-nohl-g*)
    map g# <Plug>(incsearch-nohl-g#)
    let g:incsearch#consistent_n_direction = 1

" Delete buffer leaving window structure intact
Plugin 'gwww/vim-bbye'

" Toggle comments: <visual>gc, gc<motion>; Remove comments on current and adjacent lines gcu
Plugin 'tpope/vim-commentary'

" + to expand visual select; _ (underscore) to shrink
Plugin 'terryma/vim-expand-region'

" for writing, in particular in markdown
Plugin 'reedes/vim-pencil'
    augroup pencil
        autocmd!
        autocmd FileType markdown
            \   call pencil#init({'wrap': 'hard', 'textwidth': 78})
            \ | setlocal spell makeprg=atdtool\ %
        autocmd FileType text
            \   call pencil#init({'wrap': 'hard', 'textwidth': 78})
    augroup END

" File, buffer, yank, and lots more
Plugin 'Shougo/unite.vim'
    Plugin 'Shougo/vimproc.vim'   " unite async mode
    Plugin 'Shougo/unite-outline' " unite outline from buffer

    Plugin 'Shougo/vimfiler.vim'

    let g:vimfiler_as_default_explorer = 1
    let g:vimfiler_tree_leaf_icon = " "
    let g:vimfiler_tree_opened_icon = '▾'
    let g:vimfiler_tree_closed_icon = '▸'
    let g:vimfiler_file_icon = '-'
    let g:vimfiler_marked_file_icon = '✓'
    let g:vimfiler_readonly_file_icon = '✗'
    let g:vimfiler_time_format = '%Y-%m-%d %H:%M:%S'
    "let g:vimfiler_expand_jump_to_first_child = 0
    let g:vimfiler_ignore_pattern = '\.git\|\.DS_Store\|\.pyc'
    command! -nargs=? -complete=customlist,vimfiler#complete VimFilerExplorerQuit 
        \ call vimfiler#init#_command({'explorer':1,'explorer_columns':'type:size:time','split':0,'quit':1}, <q-args>)

    nmap <space> [unite]
    nnoremap [unite] <nop>

    let g:unite_source_grep_command='ag'
    let g:unite_source_grep_default_opts='--nocolor --line-numbers --nogroup -S -C4'
    let g:unite_source_grep_recursive_opt=''
    let g:unite_source_history_yank_enable = 1

    nnoremap <silent> [unite]t :<C-u>Unite -no-split -buffer-name=files   -start-insert file_rec/async:!<cr>
    nnoremap <silent> [unite]f :<C-u>Unite -no-split -buffer-name=files   -start-insert file<cr>
    nnoremap <silent> [unite]r :<C-u>Unite -no-split -buffer-name=mru     -start-insert file_mru<cr>
    nnoremap <silent> [unite]o :<C-u>Unite -no-split -buffer-name=outline -start-insert outline<cr>
    nnoremap <silent> [unite]y :<C-u>Unite -no-split -buffer-name=yank    history/yank<cr>
    nnoremap <silent> [unite]b :<C-u>Unite -no-split -buffer-name=buffer  -quick-match buffer<cr>
    nnoremap <silent> [unite]/ :<C-u>Unite -no-split -buffer-name=search  grep:.<cr>

    " Custom mappings for the unite buffer
    autocmd FileType unite call s:unite_settings()
        function! s:unite_settings()
        " Enable navigation with control-j and control-k in insert mode
        imap <buffer> <C-j>   <Plug>(unite_select_next_line)
        imap <buffer> <C-k>   <Plug>(unite_select_previous_line)
        imap <buffer> <esc>   <Plug>(unite_exit)
    endfunction

Plugin 'Raimondi/delimitMate.git'       " handle open/close quotes, brackets, etc
    let delimitMate_expand_cr=2
    let delimitMate_expand_space=1

" add appropriate 'end' statements when opening detected (must be loaded after delimitMate
Plugin 'tpope/vim-endwise'

Plugin 'tpope/vim-surround'             " add surround action e.g.: cs"'
Plugin 'vim-scripts/matchit.zip'
Plugin 'tpope/vim-fugitive'             " git wrapper
Plugin 'mattn/emmet-vim'                " quick html/css editing

Plugin 'terryma/vim-multiple-cursors'

" Snippets support
Plugin 'MarcWeber/vim-addon-mw-utils'
Plugin 'tomtom/tlib_vim'
Plugin 'garbas/vim-snipmate'
Plugin 'honza/vim-snippets'

" Language support
Plugin 'othree/html5.vim'
Plugin 'groenewege/vim-less'
Plugin 'tpope/vim-markdown'
Plugin 'elixir-lang/vim-elixir'

call vundle#end()
filetype indent plugin on
syntax on

" Unite extra setup after vundle#end
call unite#custom#profile('default', 'context', {'prompt': '» '})
call unite#filters#matcher_default#use(['matcher_fuzzy'])

"------------------------------------------------------------
" Must have options {{{1
set hidden                  " Allow to switch buffers with first saving
set wildmenu                " Better command-line completion
set wildmode=longest,list
set showcmd                 " Show partial commands in the last line of the screen
set hlsearch
set incsearch
set showmatch
set matchtime=2
set scrolloff=6             " Keep at least 7 lines on screen when using J/K
set foldlevel=999
set noswapfile

"------------------------------------------------------------
" Usability options {{{1
set ignorecase
set smartcase
set backspace=eol,indent,start
set whichwrap+=<,>,[,]
set number
set nostartofline           " Stop certain movements from going to first char of line
set confirm                 " Raise dialogue instead of failing unsaved changes
set visualbell              " Use visual bell instead of beeping on error
set t_vb=                   " Don't flash either! 
if has('mouse')
    set mouse=a             " Enable use of the mouse for all modes
endif
set formatoptions+=n
set listchars=tab:▸\ ,eol:¬

" Quickly time out on keycodes, but never time out on mappings
set notimeout ttimeout ttimeoutlen=200

if has('gui_running')
    set guioptions-=rL
    set lines=40 columns=100
    if has('mac')
        set guifont=Inconsolata-dz\ for\ Powerline:h14
    elseif has('win32') || has('win64')
        set guifont=Consolas:h10:cANSI
    elseif has('unix')
        set guifont=Monospace\ 9
    endif
elseif &term =~ "xterm"
    " Set block/line cursor for regular/insert modes
    let &t_SI = "\<Esc>]50;CursorShape=1\x7"
    let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

"------------------------------------------------------------
" Indentation options {{{1
set expandtab       " Use spaces instead of tabs
set smarttab        " Be smart when using tabs ;)
set tabstop=4       " 4 is the lonliest number
set shiftwidth=4
set linebreak       " break at nice spot rather than text width
set wrap            " Wrap lines
set tw=0            " text width
set ai              " Auto indent
set si              " Smart indent

"------------------------------------------------------------
" Mappings {{{1
nnoremap ; :

let mapleader=","
let g:mapleader=","
map             <leader>1  <C-W>o
map             <leader>2  <C-W>s
map             <leader>3  <C-W>v
map     <silent><leader>c  :Bdelete<cr>
map     <silent><leader>e  :VimFilerExplorerQuit<cr>
map     <silent><leader>p  :setlocal paste!<cr>
nmap            <leader>P  "+P
map     <silent><leader>w  :call ToggleWrap()<cr>
noremap         <leader>y  "+y
noremap         <leader>Y  "+y$

map Y y$

" Move between and adjust windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" Make j and k work the way you expect
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk

" Reselect visual block after indent/outdent
vnoremap < <gv
vnoremap > >gv

" Keep the cursor in place while joining lines
nnoremap J mzJ`z

nnoremap <Tab>   :bnext<cr>
nnoremap <S-Tab> :bprev<cr>

" nnoremap <leader><Tab>   :bnext<CR>
" nnoremap <leader><S-Tab> :bprevious<CR>
" map <leader>tn :tabnext<cr>
" map <leader>tp :tabprev<cr>
" map <leader>te :tabedit 
" map <leader>tc :tabclose<cr>
" map <leader>tm :tabmove
" map <silent> <leader>fc <Esc>:call CleanClose(1)<cr>
" map <silent> <leader>fq <Esc>:call CleanClose(0)<cr>

"------------------------------------------------------------
" Colour {{{1
colorscheme glenn
hi link htmlLink NONE
hi link htmlItalic NONE
hi Search cterm=NONE ctermfg=251 ctermbg=31
hi cursorLine cterm=NONE ctermbg=238

"------------------------------------------------------------
" Functions {{{1
function! ToggleWrap()
    if &formatoptions =~ 'a'
        set fo-=a
        echo "Wrapping OFF"
    else
        set fo+=a
        echo "Wrapping ON"
    endif
endfunction

function! CleanClose(tosave)
  if (a:tosave == 1)
      w!
  endif
  let todelbufNr = bufnr("%")
  let newbufNr = bufnr("#")
  if ((newbufNr != -1) && (newbufNr != todelbufNr) && buflisted(newbufNr))
      exe "b".newbufNr
  else
      bnext
  endif

  if (bufnr("%") == todelbufNr)
      new
  endif
  exe "bd".todelbufNr
endfunction
